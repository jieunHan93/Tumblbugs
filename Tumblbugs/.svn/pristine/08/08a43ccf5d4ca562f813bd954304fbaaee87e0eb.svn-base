package com.tumblbugs.controller;

import java.util.ArrayList;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.tumblbugs.dao.CollectionDAO;
import com.tumblbugs.dao.testDAO;
import com.tumblbugs.vo.CollectionVO;
import com.tumblbugs.vo.testVO;

@Controller
public class ProjectSortController {
	
	@Autowired
	private CollectionDAO collectionDAO;
	
	int count = 0;
	@RequestMapping(value = "/discover", method = RequestMethod.GET)
	public String scroll() {
		return "/project_sort/project_discover";
	}
	@RequestMapping(value = "/discover_proc", method = RequestMethod.GET)
	@ResponseBody
	public String scroll_pro(String page, String category, String ongoing, String rate, String money, String editorpick, String order) {
		if(category.equals("null"))  category = "전체";
		if(ongoing.equals("null"))  ongoing = "전체";
		if(rate.equals("null"))	 rate = "전체";
		if(money.equals("null"))  money ="전체";
		if(editorpick.equals("null"))  editorpick="전체";
		if(order.equals("null"))  order="fav";
		//System.out.println("category:" + category +", ongoing:" + ongoing+", rate:" + rate+", money:"+money+", editorpick:"+editorpick+", order:"+order);
		if(Integer.parseInt(page) == 2 && count != 0) count = 0;
		
		testDAO dao = new testDAO();
		// 페이징 처리 - startCount, endCount 구하기
		int startCount = 0;
		int endCount = 0;
		int pageSize = 8; // 한페이지당 게시물 수
		int reqPage = 1; // 요청페이지
		int pageCount = 1; // 전체 페이지 수
		int dbCount = dao.execTotalCount(); // DB에서 가져온 전체 행수(전체 페이지를 구하기 위함)
		int totalPage = 0;
		
		// 총 페이지 수 계산
		if (dbCount % pageSize == 0) {
			pageCount = dbCount / pageSize;
		} else {
			pageCount = dbCount / pageSize + 1;
		}

		// 요청 페이지 계산
		if (page != null && count != 0) {
			reqPage = Integer.parseInt(page); // rpage는 쿼리 스트링으로 넘어와서 String 타입이다!
			startCount = (reqPage - 1) * pageSize + 1; // 1 페이지 일때는 무조건 1이 나온다
			endCount = reqPage * pageSize;
		} else if(page != null && count == 0){
			reqPage = 1;
			startCount = 1;
			endCount = pageSize;
			count++;
		} 
		
		ArrayList<testVO> list = dao.getList(startCount, endCount);
		Gson gson = new Gson();
		JsonArray jlist = new JsonArray();
		JsonObject jdata = new JsonObject();

		for (testVO vo : list) {
			JsonObject obj = new JsonObject();
			obj.addProperty("title", vo.getTitle());
			obj.addProperty("tdate", vo.getTdate());
			obj.addProperty("tcategory", vo.getTcategory());
			obj.addProperty("dbCount", dbCount);
			jlist.add(obj);
		}
		jdata.add("list", jlist);
		String result = gson.toJson(jdata);

		return result;
	}
	
	
	@RequestMapping(value="/collections", method=RequestMethod.GET)
	public ModelAndView collections(String col_id) {
		ModelAndView mv = new ModelAndView();
		CollectionVO vo =collectionDAO.getResultTitle(col_id);
		mv.addObject("vo", vo);
		mv.setViewName("/project_sort/project_collections");
		return mv;
	}
	
	@RequestMapping(value = "/collections_proc", method = RequestMethod.GET)
	@ResponseBody
	public String collections_proc(String page) {
		if(Integer.parseInt(page) == 2 && count != 0) count = 0;
		
		testDAO dao = new testDAO();
		// 페이징 처리 - startCount, endCount 구하기
		int startCount = 0;
		int endCount = 0;
		int pageSize = 8; // 한페이지당 게시물 수
		int reqPage = 1; // 요청페이지
		int pageCount = 1; // 전체 페이지 수
		int dbCount = dao.execTotalCount(); // DB에서 가져온 전체 행수(전체 페이지를 구하기 위함)
		int totalPage = 0;
		
		// 총 페이지 수 계산
		if (dbCount % pageSize == 0) {
			pageCount = dbCount / pageSize;
		} else {
			pageCount = dbCount / pageSize + 1;
		}

		// 요청 페이지 계산
		if (page != null && count != 0) {
			reqPage = Integer.parseInt(page); // rpage는 쿼리 스트링으로 넘어와서 String 타입이다!
			startCount = (reqPage - 1) * pageSize + 1; // 1 페이지 일때는 무조건 1이 나온다
			endCount = reqPage * pageSize;
		} else if(page != null && count == 0){
			reqPage = 1;
			startCount = 1;
			endCount = pageSize;
			count++;
		} 
		
		ArrayList<testVO> list = dao.getList(startCount, endCount);
		Gson gson = new Gson();
		JsonArray jlist = new JsonArray();
		JsonObject jdata = new JsonObject();

		for (testVO vo : list) {
			JsonObject obj = new JsonObject();
			obj.addProperty("title", vo.getTitle());
			obj.addProperty("tdate", vo.getTdate());
			jlist.add(obj);
		}
		jdata.add("list", jlist);
		String result = gson.toJson(jdata);

		return result;
	}
}
